"""
    Define the linear model used to translate skill
    difficulty to predict perc correct (Rausch model)
    Ability prediction is based on avg perc correct 
    across all skills (generated by RNN GRU model)
    The model outputs predicted perc correct using
    sigmoid(ability - difficulty) and the loss is based
    on the difference between output and actual perc correct
"""
import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms
from torch.autograd import Variable
import torch.nn.functional as F
import matplotlib.pyplot as plt
import numpy as np
import os
import json
from torch.utils.data import sampler
import torch.nn.utils as utils
import random
import pdb
import time


class Skill(nn.Module):
    def __init__(self, content_dim):
        super(Skill_Model, self).__init__()
        self.content_dim  = content_dim
        self.init_difficulty()


    def init_difficulty(self):
        self.skill_difficulty = Variable(
            torch.randn(1,self.content_dim),
                requires_grad= True)

    def forward(self, pred_ability, mask):
        # input the predicted perc correct (aggregate to ability)
        # and the padded mask label
        # delta =  ability * padded_mask - difficulty * padded_mask
        # sigmoid(delta) = probability of correct (output)
        # [TODO]: only use dim =2 if batched, otherwise dim=1
        ability = torch.mean(pred_ability, dim=2)
        ability_t = ability.view(ability.shape[0], ability.shape[1], 1)
        delta = ability_t*mask - self.skill_difficulty*mask
        # add sigmoid layer 
        # p(correct) = 1/1+exp(- (ability - difficulty))
        output = torch.sigmoid(delta)
        return output

    def loss(self, output, label, mask):
        # compare the output with the actual perc correct
        # and use the mask to black out the output not in label
        mask_output = output*mask
        mask_label = label*mask
        # use MSELoss to compre masked output and label
        mse = nn.MSELoss()
        loss = mse(mask_output, mask_label)
        return loss

